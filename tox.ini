# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit, static, coverage-report

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
;lib_path = {toxinidir}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
  PYTHON_KEYRING_BACKEND = keyring.backends.fail.Keyring
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry lock --no-update
    poetry install --only fmt
commands =
    poetry run isort {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry lock --no-update
    poetry install --with lint
commands =
    pydocstyle {[vars]src_path}
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {toxinidir} --skip {toxinidir}/.git --skip {toxinidir}/.tox \
      --skip {toxinidir}/build --skip {toxinidir}/lib --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache --skip {toxinidir}/icon.svg
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
    mypy {[vars]all_path}
    pylint {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry lock --no-update
    poetry install --with unit
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    coverage report

[testenv:coverage-report]
description = Create test coverage report
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry lock --no-update
    poetry install --with coverage-report
commands =
    coverage report

[testenv:static]
description = Run static analysis tests
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry lock --no-update
    poetry install --with static
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]src_path} {[vars]tst_path}

[testenv:integration]
description = Run integration tests
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry lock --no-update
    poetry install --with integration
commands =
    pytest -v --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:src-docs]
allowlist_externals=sh
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
description = Generate documentation for src
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry install --with src-docs
commands =
    ; can't run lazydocs directly due to needing to run it on src/* which produces an invocation error in tox
    sh generate-src-docs.sh

[testenv:pack]
description = Run `charmcraft pack`
allowlist_externals =
    charmcraft
    mv
deps =
    poetry
    poetry-plugin-export
commands_pre =
    poetry export --only main,charm-libs --output requirements.txt
commands =
    charmcraft pack {posargs}
commands_post =
    mv requirements.txt requirements-last-build.txt
