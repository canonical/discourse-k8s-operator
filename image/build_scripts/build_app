#!/bin/bash
#
# build_app
#
# This builds the application. This should include retrieving the app if it is
# built from source, as well as any build, install and post-install setup.

echo "Building ${CONTAINER_APP_NAME} ${CONTAINER_APP_VERSION} in ${CONTAINER_APP_ROOT}..."

mkdir -p "${GEM_HOME}"
chown "${CONTAINER_APP_USERNAME}:${CONTAINER_APP_GROUP}" "${GEM_HOME}"

cd "${CONTAINER_APP_ROOT}" || exit 1
git clone --depth 1 --branch "${CONTAINER_APP_VERSION}" https://github.com/discourse/discourse.git "${CONTAINER_APP_VERSION}"

# Apply patch for LP#1903695
git -C "${CONTAINER_APP_VERSION}" apply /srv/build_scripts/lp1903695.patch

chown -R "${CONTAINER_APP_USERNAME}:${CONTAINER_APP_GROUP}" "${CONTAINER_APP_VERSION}"
ln -s "${CONTAINER_APP_ROOT}/${CONTAINER_APP_VERSION}" app
cd "${CONTAINER_APP_ROOT}/app" || exit 1

# This must be done as the discourse user in order to avoid permission 
# problems later.
su -s /bin/bash -c 'gem install bundler' "${CONTAINER_APP_USERNAME}"
su -s /bin/bash -c 'bin/bundle install' "${CONTAINER_APP_USERNAME}"

# If intermediate files are generated by the build process or other files are
# generated that are not needed at runtime, remove them here to save image size.
# If we don't do this they will become part of the image even if removed later.
find "${CONTAINER_APP_ROOT}" -name tmp -type d -exec rm -rf {} +

# Create the backup and upload directories as Discourse doesn't like it 
# when they are missing and won't auto-create them at runtime
mkdir -p "${CONTAINER_APP_ROOT}/app/tmp/backups/default"
mkdir -p "${CONTAINER_APP_ROOT}/app/public/backups/default"
mkdir -p "${CONTAINER_APP_ROOT}/app/public/uploads/default"
chown -R "${CONTAINER_APP_USERNAME}:${CONTAINER_APP_GROUP}" "${CONTAINER_APP_ROOT}/app"/*
