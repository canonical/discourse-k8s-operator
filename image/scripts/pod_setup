#!/bin/bash

cd "${CONTAINER_APP_ROOT}/app" || exit 1

export RAILS_ENV="${DISCOURSE_RAILS_ENVIRONMENT:-production}"

### MIGRATION LOCK WORKAROUND STARTS HERE
#
# Try to get an exclusive lock via redis prior to migration so that we don't
# have multiple units running migration at once. This is a workaround because we
# don't have an official Juju way to do this coordination at this point. When we
# do, this will go away.
MIGRATE_LOCK=$(redis-cli -h "$DISCOURSE_REDIS_HOST" --raw setnx discourse_migrate_lock "$HOSTNAME")
if [ "${MIGRATE_LOCK}" == "1" ]; then
    # If we are here, we got the migrate lock, so we can do the migrate.
    echo "Starting migration at $(date)"
    su -s /bin/bash -c "bin/bundle exec rake db:migrate RAILS_ENV=$RAILS_ENV" "${CONTAINER_APP_USERNAME}"
    redis-cli -h "$DISCOURSE_REDIS_HOST" --raw del discourse_migrate_lock >/dev/null
else
    RETRIES=5
    while [ "${RETRIES}" -gt 0 ]; do
        MIGRATE_HOST=$(redis-cli -h "$DISCOURSE_REDIS_HOST" --raw get discourse_migrate_lock)
        if [ -z "${MIGRATE_HOST}" ]; then
            break;
        else
            echo "Migrate lock found, Migrate running on ${MIGRATE_HOST}, waiting 90s."
            sleep 90
        fi
        RETRIES=$((RETRIES - 1))
    done

    if [ "$RETRIES" -le 0 ]; then
        echo "Retried too many times. Can't proceed while migrate is unfinished. Exiting."
        exit 1
    fi
fi
### MIGRATION LOCK WORKAROUND ENDS HERE

su -s /bin/bash -c "bin/bundle exec rake assets:precompile RAILS_ENV=$RAILS_ENV" "${CONTAINER_APP_USERNAME}" 2>&1 | sed 's/^/asset-build: /'

if [ -n "${DISCOURSE_USE_S3}" ] && [ "${DISCOURSE_USE_S3}" == "true" ]; then
	echo "Discourse is configured to use S3:"
	echo "S3_ENDPOINT=${DISCOURSE_S3_ENDPOINT}"
	echo "S3_BUCKET=${DISCOURSE_S3_BUCKET}"
	echo "Running migration to S3..."
	su -s /bin/bash -c "bin/bundle exec rake s3:upload_assets RAILS_ENV=$RAILS_ENV" "${CONTAINER_APP_USERNAME}" 2>&1
else
	echo "Not running migration to S3 (DISCOURSE_USE_S3=${DISCOURSE_USE_S3})."
fi
